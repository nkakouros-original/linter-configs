#!/usr/bin/env bash

set -euo pipefail
shopt -s expand_aliases
shopt -s extglob
shopt -s globstar

array_is_empty() {
  if [[ "$(declare -p "$1")" == "declare -a $1=([0]=\"\")" ]]; then
    return 0
  fi
  return 1
}

info() {
  printf '\n\e[33m%s\e[0m\n' "$*"

  if [[ "$debug" == true ]]; then
    export PS4="\n\033[1;33mRunning linter: \033[0m"
    set -x
  else
    trap "[[ \$BASH_COMMAND == !(trap\ *|error=*|cd\ *|exit\ *|cp\ *|rm\ *|[) ]] && info \$BASH_COMMAND" DEBUG
  fi
}

alias fi='{ trap - DEBUG; set +x; } 2>/dev/null; fi'

find_head_branch() {
  head="${HEAD_REF:-}"

  [[ "$head" != '' ]] && echo "$head" && return

  head="$(git rev-parse --abbrev-ref HEAD)"

  [[ "$head" != '' ]] && echo "$head" && return

  head='HEAD'

  echo "$head"
}

find_base_branch() {
  base="${BASE_REF:-}"

  [[ "$base" != '' ]] && echo "$base" && return

  base="$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')"

  [[ "$base" != '' ]] && echo "$base" && return

  echo 'Private repo or no origin remote set' 2>/dev/null
  echo 'Set PR_MODE=0 or supply BASE_REF to compare against' 2>/dev/null
  exit 1
}

pr_mode="${PR_MODE:-true}"  # Dockerfile ENV
debug="${DEBUG:-false}"  # Dockerfile ENV

git config --global --add safe.directory /repo
if [[ -v GITHUB_ACTION ]]; then
  git config --global --add safe.directory /repo
fi

if [[ "$pr_mode" == true ]]; then
  head_branch="$(find_head_branch)"
  base_branch="$(find_base_branch)"
fi

error=0

find_files() {
  extension="$1"
  language="${2-}"

  if [[ "$pr_mode" == true ]]; then
    readarray -t files <<<"$(
      git log --oneline --name-only --pretty='format:' $base_branch..$head_branch -- \
        | sort -u \
        | xargs ls -d 2>/dev/null \
        | xargs -L1 bash -c '[[ -d "$0" ]] || echo "$0"' \
        | grep -P ".$extension\$"

      [[ -v language ]] \
        && git log --oneline --name-only --pretty='format:' $base_branch..$head_branch -- \
           | sort -u \
           | xargs ls -d 2>/dev/null \
           | xargs -L1 bash -c '[[ -d "$0" ]] || echo "$0"' \
           | xargs awk 'FNR>1 {nextfile} /( |\/)'$language'$/ { print FILENAME; nextfile }'
    )"
  else
    readarray -t files <<<"$(
      git ls-files \*."$extension"

      [[ -v language ]] \
        && git ls-files \
           | xargs awk 'FNR>1 {nextfile} /( |\/)'$language'$/ { print FILENAME; nextfile }'
    )"
  fi

  absolute_files=("${files[@]/#/$PWD/}")
}

alias cspell="{ [[ ! -r cspell.txt ]] && rm -f cspell.json; } 2>/dev/null || :;
                npm --prefix /linter-configs/vendor exec -- cspell lint \
                  $([[ -e cspell.txt ]] || echo --config /dev/null) --language-id"

# Python
find_files py python
if ! array_is_empty files; then
  info 'Linting Python files'
  bandit --silent "${files[@]}" || { error=1; } 2>/dev/null
  black --check --diff --quiet "${files[@]}" || { error=1; } 2>/dev/null
  flake8 "${files[@]}" || { error=1; } 2>/dev/null
  isort --check-only "${files[@]}" || { error=1; } 2>/dev/null
  pydocstyle "${files[@]}" || { error=1; } 2>/dev/null
  mypy --install-types --non-interactive "${files[@]}" || { error=1; } 2>/dev/null
  vulture "${files[@]}" || { error=1; } 2>/dev/null

  cspell python "${absolute_files[@]}" || { error=1; } 2>/dev/null
fi

# markdown
find_files md markdown
if ! array_is_empty files; then
  info 'Linting Markdown files'
  flake8-markdown "${files[*]}" | { error=1; } 2>/dev/null

  {
    cd /linter-configs/vendor;
    cp ../configs/.remarkrc.yml ./;
  }
  npx remark --frail --quiet "${absolute_files[@]}" --rc-path ./.remarkrc.yml >/dev/null \
    || { error=1; } 2>/dev/null
  { cd -; } &>/dev/null

  proselint "${files[@]}" || { error=1; } 2>/dev/null

  cspell markdown "${absolute_files[@]}" || { error=1; }
fi

# bash
find_files sh bash
if ! array_is_empty files; then
  info 'Linting Bash files'
  shfmt $(<.shfmt.rc) "${files[@]}" || { error=1; } 2>/dev/null
  shellcheck "${files[@]}" || { error=1; } 2>/dev/null
  /linter-configs/bin/extra-lint-bash.sh "${files[@]}" || { error=1; } 2>/dev/null
  cspell shell "${absolute_files[@]}" || { error=1; } 2>/dev/null
fi

# yaml
find_files yml
if ! array_is_empty files; then
  info 'Linting YAML files'
  yamllint "${files[@]}" || { error=1; } 2>/dev/null
fi

# ansible
# ANSIBLE_COLLECTIONS_DIRS="${ANSIBLE_COLLECTIONS_DIRS-}"
# mapfile -t paths <<< "${ANSIBLE_COLLECTIONS_DIRS//:/$'\n'}"
# pip install molecule molecule-podman molecule-docker
# if ! array_is_empty paths; then
#   eval role_paths=( "${paths[@]/%//ansible_collections/*/*/roles/**/*/molecule}" )
#   for role_path in "${role_paths[@]}"; do
#     if [[ -d "$role_path" ]]; then
#       (
#         cd "${role_path%/molecule*}"
#         pwd
#         molecule -c /repo/molecule.yml test
#       ) || error=1
#     fi
#   done
# fi

exit "$error"
