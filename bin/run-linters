#!/usr/bin/env bash

set -euo pipefail

array_is_empty() {
  if [[ "$(declare -p "$1")" == "declare -a $1=([0]=\"\")" ]]; then
    return 0
  fi
  return 1
}

info() {
  printf '\n\e[33m%s\e[0m\n' "$*"

  if [[ "$debug" == true ]]; then
    export PS4="\n\033[1;33mRunning linter: \033[0m"
    set -x
  else
    trap "[[ \$BASH_COMMAND == !(trap\ *|error=*|cd\ *|exit\ *|cp\ *|rm\ *) ]] && info \$BASH_COMMAND" DEBUG
  fi
}

find_head_branch() {
  head="${HEAD_REF:-}"

  [[ "$head" != '' ]] && echo "$head" && return

  head="$(git rev-parse --abbrev-ref HEAD)"

  [[ "$head" != '' ]] && echo "$head" && return

  head='HEAD'

  echo "$head"
}

find_base_branch() {
  base="${BASE_REF:-}"

  [[ "$base" != '' ]] && echo "$base" && return

  base="$(git remote show origin | sed -n '/HEAD branch/s/.*: //p')"

  [[ "$base" != '' ]] && echo "$base" && return

  echo 'Private repo or no origin remote set' 2>/dev/null
  echo 'Set PR_MODE=0 or supply BASE_REF to compare against' 2>/dev/null
  exit 1
}

pr_mode="${PR_MODE:-true}"  # Dockerfile ENV
debug="${DEBUG:-false}"  # Dockerfile ENV

set -x
unset PS4
git config --global --add safe.directory /repo
git branch -r
git branch -a
git log
git status

if [[ "$pr_mode" == true ]]; then
  head_branch="$(find_head_branch)"
  base_branch="$(find_base_branch)"
fi

error=0
declare -a files=()

find_files() {
  type="$1"

  if [[ "$pr_mode" == true ]]; then
    readarray -t files <<<"$(
      git log --oneline --name-only --pretty='format:' $base_branch..$head_branch -- \
        | sort -u \
        | grep -P ".$type\$"
    )"
  else
    readarray -t files <<<"$(git ls-files \*."$type")"
  fi
}

# Python
find_files py
if ! array_is_empty files; then
  info 'Linting Python files'
  bandit --silent "${files[@]}" || { error=1; } 2>/dev/null
  black --check --diff --quiet "${files[@]}" || { error=1; } 2>/dev/null
  flake8 "${files[@]}" || { error=1; } 2>/dev/null
  isort --check-only "${files[@]}" || { error=1; } 2>/dev/null
  pydocstyle "${files[@]}" || { error=1; } 2>/dev/null
  mypy --install-types --non-interactive "${files[@]}" || { error=1; } 2>/dev/null
  vulture "${files[@]}" || { error=1; } 2>/dev/null
  { trap - DEBUG; set +x; } 2>/dev/null
fi

# markdown
find_files md
if ! array_is_empty files; then
  info 'Linting Markdown files'
  flake8-markdown "${files[*]}" | { error=1; } 2>/dev/null

  {
    repo_dir="$PWD";
    cd /linter-configs/vendor;
    cp ../configs/.remarkrc.yml ./;
  }
  npx remark --quiet "${files[@]/#/$repo_dir/}" --rc-path ./.remarkrc.yml >/dev/null
  { cd -; } &>/dev/null

  { trap - DEBUG; set +x; } 2>/dev/null
fi

exit "$error"
